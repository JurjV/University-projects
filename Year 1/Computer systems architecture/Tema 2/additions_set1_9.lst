     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;a - byte, b - word, c - double word, d - qword
    14 00000000 08                          a db 8
    15 00000001 0C00                        b dw 12
    16 00000003 32000000                    c dd 50
    17 00000007 D007000000000000            d dq 2000
    18                                      
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ;(d+d-b)+(c-a)+d
    24                                          ;d= edx:edx 
    25 00000000 A1[07000000]                    mov eax,[d+0] ;eax=lower part of number
    26 00000005 8B15[0B000000]                  mov edx,[d+4] ;edx=higher part of number
    27 0000000B 01C0                            add eax,eax ;eax=eax+eax
    28 0000000D 11D2                            adc edx,edx ;edx=edx+edx
    29 0000000F 2B05[01000000]                  sub eax,[b]
    30 00000015 B900000000                      mov ecx,0
    31 0000001A 29CA                            sub edx,ecx ; EDX:EAX = (d+d-b)
    32 0000001C B900000000                      mov ecx,0
    33 00000021 8B0D[03000000]                  mov ecx,[c]
    34 00000027 BB00000000                      mov ebx,0
    35 0000002C 8A1D[00000000]                  mov bl,[a]
    36 00000032 29D9                            sub ecx,ebx
    37 00000034 BB00000000                      mov ebx,0
    38 00000039 F8                              clc
    39 0000003A 01C8                            add eax,ecx
    40 0000003C 83D200                          adc edx,0 ; EDX:EAX = (d+d-b)+(c-a)
    41 0000003F 8B0D[07000000]                  mov ecx,[d+0]
    42 00000045 8B1D[0B000000]                  mov ebx,[d+4]
    43 0000004B 01C8                            add eax,ecx
    44 0000004D 11DA                            adc edx,ebx ; EDX:EAX =(d+d-b)+(c-a)+d
    45                                          
    46                                          
    47                                      
    48                                          ; exit(0)
    49 0000004F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000051 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
