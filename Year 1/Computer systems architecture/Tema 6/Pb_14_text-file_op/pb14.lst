     1                                  ;A file name and a text (defined in the data segment) are given. The text contains lowercase letters, uppercase letters, digits and special characters. Transform all the uppercase letters from the given text in lowe
     2                                  bits 32 ; assembling for the 32 bits architecture
     3                                  
     4                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     5                                  global start        
     6                                  
     7                                  ; declare external functions needed by our program
     8                                  extern exit,fprintf,fopen,fclose               ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import fprintf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import fopen msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                  import fclose msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                  
    18 00000000 66696C652E74787400          file_name db "file.txt",0
    19 00000009 426263414243313233-         text db "BbcABC123[]B",0
    19 00000012 5B5D4200           
    20                                      len equ $-text
    21 00000016 00<rept>                    res_text times len db 0
    22 00000023 772B00                      write_mode db "w+",0
    23 00000026 257300                      write_format db "%s",0
    24 00000029 00000000                    file_descriptor dd 0
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29 00000000 B90D000000                      mov ecx,len
    30 00000005 BE[09000000]                    mov esi,text
    31 0000000A BF[16000000]                    mov edi,res_text
    32 0000000F FC                              cld
    33                                          Repeta:
    34 00000010 51                              push ecx
    35 00000011 AC                                  lodsb
    36 00000012 3C41                                cmp al,"A"
    37 00000014 7206                                jb Not_a_letter
    38 00000016 3C5A                                cmp al,"Z"
    39 00000018 7702                                ja Not_a_letter
    40 0000001A 0420                                add al,"a"-"A"
    41                                              Not_a_letter:
    42 0000001C AA                                  stosb
    43 0000001D 59                                  pop ecx
    44 0000001E E2F0                                loop Repeta
    45                                              
    46 00000020 68[23000000]                   push dword write_mode
    47 00000025 68[00000000]                   push dword file_name
    48 0000002A FF15[00000000]                 call [fopen]
    49 00000030 83C408                         add esp,4*2
    50                                         
    51 00000033 83F800                         cmp eax,0
    52 00000036 742D                           je Incorrect
    53 00000038 A3[29000000]                   mov [file_descriptor],eax
    54                                         
    55 0000003D 68[16000000]                   push dword res_text
    56 00000042 68[26000000]                   push dword write_format
    57 00000047 FF35[29000000]                 push dword [file_descriptor]
    58 0000004D FF15[00000000]                 call [fprintf]
    59 00000053 83C40C                         add esp,4*3
    60                                         
    61 00000056 FF35[29000000]                 push dword [file_descriptor]
    62 0000005C FF15[00000000]                 call [fclose]    ; closing the file
    63 00000062 83C404                         add esp, 4
    64                                         
    65                                         Incorrect:
    66                                      
    67                                          ; exit(0)
    68 00000065 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    69 00000067 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
