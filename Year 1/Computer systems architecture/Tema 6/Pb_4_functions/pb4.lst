     1                                  ;Two natural numbers a and b (a, b: dword, defined in the data segment) are given. Calculate their product and display the result in the following format: "<a> * <b> = <result>". Example: "2 * 4 = 8"
     2                                  ;The values will be displayed in decimal format (base 10) with sign.
     3                                  bits 32 ; assembling for the 32 bits architecture
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit,scanf,printf               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 00000000                    a dd 0
    18 00000004 00000000                    b dd 0
    19 00000008 00000000                    result dd 0
    20 0000000C 613D000000000000            read_text_a dd "a=",0
    21 00000014 623D000000000000            read_text_b dd "b=",0
    22 0000001C 2564000000000000            read_format dd "%d",0
    23 00000024 2564202A2025643D20-         result_format dd "%d * %d= %x = %d",0
    23 0000002D 2578203D2025640000-
    23 00000036 0000               
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28 00000000 68[0C000000]                    push dword read_text_a
    29 00000005 FF15[00000000]                  call [printf]
    30 0000000B 83C404                          add esp,4
    31                                          
    32 0000000E 68[00000000]                    push dword a
    33 00000013 68[1C000000]                    push dword read_format
    34 00000018 FF15[00000000]                  call [scanf]
    35 0000001E 83C408                          add esp,4*2
    36                                          
    37 00000021 68[14000000]                    push dword read_text_b
    38 00000026 FF15[00000000]                  call [printf]
    39 0000002C 83C404                          add esp,4
    40                                          
    41 0000002F 68[04000000]                    push dword b
    42 00000034 68[1C000000]                    push dword read_format
    43 00000039 FF15[00000000]                  call [scanf]
    44 0000003F 83C408                          add esp,4*2
    45                                      
    46 00000042 A1[00000000]                    mov  eax,[a]
    47 00000047 F72D[04000000]                  imul dword [b]
    48 0000004D A3[08000000]                    mov [result],eax
    49                                          
    50 00000052 FF35[08000000]                  push dword [result]
    51 00000058 FF35[08000000]                  push dword [result]
    52 0000005E FF35[04000000]                  push dword [b]
    53 00000064 FF35[00000000]                  push dword [a]
    54 0000006A 68[24000000]                    push result_format
    55 0000006F FF15[00000000]                  call [printf]
    56 00000075 83C410                          add esp,4*4
    57                                      
    58                                          ; exit(0)
    59 00000078 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 0000007A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
