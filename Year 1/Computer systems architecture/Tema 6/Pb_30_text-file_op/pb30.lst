     1                                  ;A file name (defined in data segment) is given. Create a file with the given name, then read words from the keyboard until character '$' is read from the keyboard. Write only the words that contain at least one dig
     2                                  bits 32 ; assembling for the 32 bits architecture
     3                                  
     4                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     5                                  global start        
     6                                  
     7                                  ; declare external functions needed by our program
     8                                  extern exit,fopen,fclose,scanf,fprintf               ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import fopen msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import fclose msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                  import fprintf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 66696C652E74787400          file_name db "file.txt",0
    19 00000009 7700                        file_type db "w",0
    20 0000000B FFFFFFFF                    file_descriptor dd -1
    21 0000000F 00<rept>                    cuvant times 100 db 0
    22 00000073 257300                      cuvant_type db "%s",0
    23 00000076 00<rept>                    cuvant_prelucrat times 100 db 0
    24 000000DA 25730A00                    cuvant_de_scris_format db "%s",0ah,0
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29 00000000 68[09000000]                    push dword file_type
    30 00000005 68[00000000]                    push dword file_name
    31 0000000A FF15[00000000]                  call [fopen]
    32 00000010 83C408                          add esp,4*2
    33                                          
    34 00000013 A3[0B000000]                    mov [file_descriptor],eax
    35 00000018 83F800                          cmp eax,0
    36 0000001B 7467                            je Final
    37                                          
    38                                          Read_loop:
    39 0000001D 68[0F000000]                    push dword cuvant
    40 00000022 68[73000000]                    push dword cuvant_type
    41 00000027 FF15[00000000]                  call [scanf]
    42 0000002D 83C408                          add esp,4*2
    43                                          
    44 00000030 BE[0F000000]                    mov esi, cuvant
    45 00000035 BF[76000000]                    mov edi, cuvant_prelucrat
    46 0000003A B200                            mov dl,0
    47 0000003C FC                              cld
    48                                          Prelucrare_cuvant:
    49 0000003D AC                                  lodsb
    50 0000003E 3C24                                cmp al,"$"
    51 00000040 7502                                jne Peste
    52 00000042 EB31                                jmp Gata
    53                                              Peste:
    54                                              
    55 00000044 3C00                                cmp al,0
    56 00000046 740D                                je Urmatorul_cuvant
    57                                              
    58 00000048 3C30                                cmp al,"0"
    59 0000004A 7206                                jb Not_good
    60 0000004C 3C39                                cmp al,"9"
    61 0000004E 7702                                ja Not_good
    62 00000050 FEC2                                inc dl
    63                                              Not_good:
    64 00000052 AA                                  stosb
    65 00000053 EBE8                                jmp Prelucrare_cuvant
    66                                              
    67                                              Urmatorul_cuvant:
    68 00000055 80FA00                                  cmp dl,0
    69 00000058 7419                                    je Mai_departe
    70 0000005A 68[76000000]                            push dword cuvant_prelucrat
    71 0000005F 68[DA000000]                            push dword cuvant_de_scris_format
    72 00000064 FF35[0B000000]                          push dword [file_descriptor]
    73 0000006A FF15[00000000]                          call [fprintf]
    74 00000070 83C40C                                  add esp,4*3
    75                                              
    76                                                  Mai_departe:
    77 00000073 EBA8                                    jmp Read_loop
    78                                          
    79                                          Gata:
    80                                          
    81 00000075 FF35[0B000000]                  push dword [file_descriptor]
    82 0000007B FF15[00000000]                  call [fclose]
    83 00000081 83C404                          add esp,4
    84                                          
    85                                          Final:
    86                                          
    87                                          ; exit(0)
    88 00000084 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    89 00000086 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
