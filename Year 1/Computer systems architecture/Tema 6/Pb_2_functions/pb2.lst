     1                                  ;Read two numbers a and b (in base 10) from the keyboard and calculate a/b. This value will be stored in a variable called "result" (defined in the data segment). The values are considered in signed representation.
     2                                  bits 32 ; assembling for the 32 bits architecture
     3                                  
     4                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     5                                  global start        
     6                                  
     7                                  ; declare external functions needed by our program
     8                                  extern exit,printf,scanf          ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll
    10                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 00000000                    a dd 0
    17 00000004 00000000                    b dd 0
    18 00000008 00000000                    result dd 0
    19 0000000C 613D000000000000            read_text_a dd "a=",0
    20 00000014 623D000000000000            read_text_b dd "b=",0
    21 0000001C 2564000000000000            read_format dd "%d",0
    22 00000024 25642F25643D256400-         result_format dd "%d/%d=%d",0
    22 0000002D 000000             
    23                                      
    24                                      
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29 00000000 68[0C000000]                    push dword read_text_a
    30 00000005 FF15[00000000]                  call [printf]
    31 0000000B 83C404                          add esp,4
    32                                          
    33 0000000E 68[00000000]                    push dword a
    34 00000013 68[1C000000]                    push dword read_format
    35 00000018 FF15[00000000]                  call [scanf]
    36 0000001E 83C408                          add esp,8
    37                                          
    38 00000021 68[14000000]                    push dword read_text_b
    39 00000026 FF15[00000000]                  call [printf]
    40 0000002C 83C404                          add esp,4
    41                                          
    42 0000002F 68[04000000]                    push dword b
    43 00000034 68[1C000000]                    push dword read_format
    44 00000039 FF15[00000000]                  call [scanf]
    45 0000003F 83C408                          add esp,8
    46                                          
    47 00000042 A1[00000000]                    mov eax,[a]
    48 00000047 99                              cdq
    49 00000048 8B1D[04000000]                  mov ebx,[b]
    50 0000004E F7FB                            idiv ebx
    51 00000050 A3[08000000]                    mov  [result],eax
    52                                          
    53 00000055 FF35[08000000]                  push dword [result]
    54 0000005B FF35[04000000]                  push dword [b]
    55 00000061 FF35[00000000]                  push dword [a]
    56 00000067 68[24000000]                    push dword result_format
    57 0000006C FF15[00000000]                  call [printf]
    58 00000072 83C410                          add esp,4*4
    59                                      
    60                                          ; exit(0)
    61 00000075 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 00000077 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
